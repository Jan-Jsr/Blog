代码覆盖（英语：Code coverage）是软件测试中的一种度量，描述程序中源代码被测试的比例和程度，所得比例称为代码覆盖率。以下是代码覆盖率的一些基本准则：


函式覆盖率（Function coverage）：有呼叫到程式中的每一个函式（或副程式）吗？

指令覆盖率（Statement coverage）：若用控制流图表示程式，有执行到控制流图中的每一个节点吗？

判断覆盖率（Decision coverage）：（和分支覆盖率不同）若用控制流图表示程式，有执行到控制流图中的每一个边吗？例如控制结构中所有IF指令都有执行到逻辑运算式成立及不成立的情形吗？

条件覆盖率（Condition coverage）：也称为谓词覆盖（predicate coverage），每一个逻辑运算式中的每一个条件（无法再分解的逻辑运算式）是否都有执行到成立及不成立的情形吗？条件覆盖率成立不表示判断覆盖率一定成立。

条件/判断覆盖率（Condition/decision coverage）：需同时满足判断覆盖率和条件覆盖率。

在实际操作中，我用到的质量分析工具是visual studio enterprise 2019。visual studio enterprise版本中会自带测试代码覆盖率的功能。



在点击分析所有测试的代码覆盖率后，我们就可以选择“代码覆盖率结果” 窗口中的按钮“显示代码覆盖率着色” 。 默认情况下，测试覆盖的代码以浅蓝色突出显示。

接下来我们就来看代码覆盖率的测试结果，首先是前端主要代码：

代码文件	    statement	branches	functions	lines
index.js	      100%	100%(0/0)	100%(0/0)	 100%
resource.js	    100%	82%	      100%(0/0)  100%
user.js         100%	87%	      100%(0/0)	 100%
signin.spec.js	100%	100%(0/0)	100%(0/0)  100%
signup.spec.js   84%	100%(0/0)	100%(0/0)	 92%

然后是后端主要代码：

代码文件	statement	branches	functions	lines
asgi.py	     100%	 100%(0/0)	100%(0/0)	100%
settings.py	 100%	 100%(0/0)	90%	      79%
urls.py      100%	 100%(0/0)	100%	   100%
clear.py	   100%	  100%(0/0)	100%	   100%
manage.py	    62%	100%(0/0)	  100%	   82%
